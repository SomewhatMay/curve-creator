import { joinAnyBindings } from "@rbxts/pretty-react-hooks";
import React, { Binding } from "@rbxts/react";
import { useRem } from "ui/hooks/use-rem";

/**
 * These numbers represent absolute positions,
 * not Scale values.
 */
interface props {
	x1: number | Binding<number>;
	x2: number | Binding<number>;
	y1: number | Binding<number>;
	y2: number | Binding<number>;
	autoGenerated?: boolean;
	color?: Color3;
	isHandle?: boolean;
}

export function Line({ x1, x2, y1, y2, autoGenerated, color, isHandle }: props) {
	const rem = useRem();
	// const xDiff = x2 - x1;
	// const yDiff = y2 - y1;
	// const distance = math.sqrt(math.pow(xDiff, 2) + math.pow(yDiff, 2));
	// const angle = math.atan2(yDiff, xDiff);

	const bindedProps = joinAnyBindings([x1, x2, y1, y2]);
	const distance = bindedProps.map(
		([x1, x2, y1, y2]) => new UDim2(0, math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)), 0, rem(1)),
	);
	const angle = bindedProps.map(([x1, x2, y1, y2]) => math.deg(math.atan2(y2 - y1, x2 - x1)));

	return (
		<frame
			BackgroundTransparency={0}
			BorderSizePixel={0.5}
			BackgroundColor3={color ?? (autoGenerated ? new Color3(0.5, 0.5, 0.5) : new Color3(1, 1, 1))}
			Position={bindedProps.map(([x1, x2, y1, y2]) => new UDim2(0, (x1 + x2) / 2, 0, (y1 + y2) / 2))}
			Size={distance}
			AnchorPoint={new Vector2(0.5, 0.5)}
			Rotation={angle}
		>
			{!isHandle && <uistroke Transparency={0.65} Color={new Color3(1, 1, 1)} Thickness={1} />}
		</frame>
	);
}
